// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: userlocation.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserLocationServiceClient is the client API for UserLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserLocationServiceClient interface {
	SaveLocation(ctx context.Context, in *SaveLocationRequest, opts ...grpc.CallOption) (*SaveLocationResponse, error)
	GetUsersByLocationAndRadius(ctx context.Context, in *GetUsersByLocationAndRadiusRequest, opts ...grpc.CallOption) (*GetUsersByLocationAndRadiusResponse, error)
}

type userLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLocationServiceClient(cc grpc.ClientConnInterface) UserLocationServiceClient {
	return &userLocationServiceClient{cc}
}

func (c *userLocationServiceClient) SaveLocation(ctx context.Context, in *SaveLocationRequest, opts ...grpc.CallOption) (*SaveLocationResponse, error) {
	out := new(SaveLocationResponse)
	err := c.cc.Invoke(ctx, "/userlocation.UserLocationService/SaveLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLocationServiceClient) GetUsersByLocationAndRadius(ctx context.Context, in *GetUsersByLocationAndRadiusRequest, opts ...grpc.CallOption) (*GetUsersByLocationAndRadiusResponse, error) {
	out := new(GetUsersByLocationAndRadiusResponse)
	err := c.cc.Invoke(ctx, "/userlocation.UserLocationService/GetUsersByLocationAndRadius", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLocationServiceServer is the server API for UserLocationService service.
// All implementations must embed UnimplementedUserLocationServiceServer
// for forward compatibility
type UserLocationServiceServer interface {
	SaveLocation(context.Context, *SaveLocationRequest) (*SaveLocationResponse, error)
	GetUsersByLocationAndRadius(context.Context, *GetUsersByLocationAndRadiusRequest) (*GetUsersByLocationAndRadiusResponse, error)
	mustEmbedUnimplementedUserLocationServiceServer()
}

// UnimplementedUserLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserLocationServiceServer struct {
}

func (UnimplementedUserLocationServiceServer) SaveLocation(context.Context, *SaveLocationRequest) (*SaveLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLocation not implemented")
}
func (UnimplementedUserLocationServiceServer) GetUsersByLocationAndRadius(context.Context, *GetUsersByLocationAndRadiusRequest) (*GetUsersByLocationAndRadiusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByLocationAndRadius not implemented")
}
func (UnimplementedUserLocationServiceServer) mustEmbedUnimplementedUserLocationServiceServer() {}

// UnsafeUserLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserLocationServiceServer will
// result in compilation errors.
type UnsafeUserLocationServiceServer interface {
	mustEmbedUnimplementedUserLocationServiceServer()
}

func RegisterUserLocationServiceServer(s grpc.ServiceRegistrar, srv UserLocationServiceServer) {
	s.RegisterService(&UserLocationService_ServiceDesc, srv)
}

func _UserLocationService_SaveLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLocationServiceServer).SaveLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userlocation.UserLocationService/SaveLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLocationServiceServer).SaveLocation(ctx, req.(*SaveLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLocationService_GetUsersByLocationAndRadius_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByLocationAndRadiusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLocationServiceServer).GetUsersByLocationAndRadius(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userlocation.UserLocationService/GetUsersByLocationAndRadius",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLocationServiceServer).GetUsersByLocationAndRadius(ctx, req.(*GetUsersByLocationAndRadiusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserLocationService_ServiceDesc is the grpc.ServiceDesc for UserLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userlocation.UserLocationService",
	HandlerType: (*UserLocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLocation",
			Handler:    _UserLocationService_SaveLocation_Handler,
		},
		{
			MethodName: "GetUsersByLocationAndRadius",
			Handler:    _UserLocationService_GetUsersByLocationAndRadius_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userlocation.proto",
}
